2*pt(-2,15,lower.tail = TRUE)
binomial_function(3,5,.1)
binomial_function<-function(x,n,theta) {
answer <- factorial(n)/(factorial(x)*factorial(n-x))*(theta^x)*(1-theta)^(n-x)
return(answer)
}
binomial_function(6,15,.4)
binomial_function(3,5,.1)
binomial_function(4,5,.1)
binomial_function(5,5,.1)
binomial_function(3,5,.1)+ binomial_function(4,5,.1)+binomial_function(5,5,.1)
binomial_function(5,6,.7)
binomial_function(6,15,.4)
binomial_function(10,18,.5)
n_choose_r(10,9)
return(answer)
n_choose_r <- function(n,r) {
answer <- factorial(n)/(factorial(r)*factorial(n-r))
return(answer)
n_choose_r(10,9)
n_choose_r(10,9)
n_choose_r <- function(n,r) {
answer <- factorial(n)/(factorial(r)*factorial(n-r))
return(answer)
}
n_choose_r(10,9)
n_choose_r(1,1)
binomial_function<-function(x,n,theta) {
answer <- factorial(n)/(factorial(x)*factorial(n-x))*(theta^x)*(1-theta)^(n-x)
return(answer)
}
binomial_function(6,15,.4)
n_choose_r <- function(n,r) {
answer <- factorial(n)/(factorial(r)*factorial(n-r))
return(answer)
}
n_choose_r(6,4)*(4/5)^4*(1/5)^2
binomial_function(5,12,0.5)
binomial_function(3,10,.4)
binomial_function(5,400,.02)
poisson_dist<-function(lambda,x){
answer<-(exp(1)^(-lambda)*lambda^x)/factorial(x)
return(answer)
}
poisson_dist(1.8,2)
poisson_dist(1.2,1)
poisson_dist(1.2,2)
poisson_dist(1.2,1)+poisson_dist(1.2,2)
poisson_dist(1.2,0)
poisson_dist(1.2,0)+poisson_dist(1.2,1)+poisson_dist(1.2,2)
poisson_dist(3.3,2)
poisson_dist(5.2,3)
poisson_dist_cum<-function(lambda,x) {
new_answer=0
if (x>=0) {
answer<-new_answer+poisson_dist(lambda,x)
x=x-1
new_answer=answer
}
else {
return answer
}
}
poisson_dist(5.2,4)+poisson_dist(5.2,5)+poisson_dist(5.2,6)
multinomial_dist<-function(a,b,c,a1,b1,c1) {
answer <- factorial(a+b+c)/(factorial(a)*factorial(b)*factorial(c))*((a^a1)*(b^b1)*(c^c1))
return answer
}
multinomial_dist(.4,.5,.1,3,6,1)
(n_choose_r(10,3)*n_choose_r(5,1)*n_choose_r(3,2))/(n_choose_r(18,6))
binomial_function(3,5,.1)+ binomial_function(4,5,.1)+binomial_function(5,5,.1)
binomial_function(5,6,.7)
binomial_function(6,15,.4)
binomial_function(10,18,.5)
n_choose_r(1,1)
n_choose_r(1,1)
binomial_function<-function(x,n,theta) {
answer <- factorial(n)/(factorial(x)*factorial(n-x))*(theta^x)*(1-theta)^(n-x)
return(answer)
}
binomial_function(6,15,.4)
n_choose_r <- function(n,r) {
answer <- factorial(n)/(factorial(r)*factorial(n-r))
return(answer)
}
n_choose_r(1,1)
n_choose_r(10,9)
binomial_function(6,15,.42)
x<-rbinom(100,1,.5)
x
phat=numeric()
phat=numeric()
for (i in 1:20)
{
phat[i]=(x[5*i]+x[(5*i)-1]+x[(5*i)-2]+x[(5*i)-3+x(5*i)-4])/5
}
phat
x<-rbinom(100,1,.5)
x
phat=numeric()
for (i in 1:20)
{
phat[i]=(x[5*i]+x[(5*i)-1]+x[(5*i)-2]+x[(5*i)-3+x(5*i)-4])/5
}
phat
x<-rbinom(100,1,.5)
x
phat=numeric()
for (i in 1:20)
{
phat[i]=(x[5*i]+x[(5*i)-1]+x[(5*i)-2]+x[(5*i)-3]+x[(5*i)-4])/5
}
phat
n<-1:20
plot(n,phat)
abline(h=0.5,v=0,col=3)
binomial_function(6,1,.5)
binomial_function(6,1,.5)
binomial_function(6,1,.5)
binomial_function<-function(x,n,theta) {
answer <- factorial(n)/(factorial(x)*factorial(n-x))*(theta^x)*(1-theta)^(n-x)
return(answer)
}
binomial_function(6,1,.5)
binomial_function(1,6,.5)
neg_binomial_function<-function(x,k,theta) {
answer <- factorial(x-1)/(factorial(k-1)*factorial(x-k))*(theta^x)*(1-theta)^(x-k)
return(answer)
}
neg_binomial_function(2,7,.5)
neg_binomial_function(7,2,.5)
neg_binomial_function<-function(x,k,theta) {
answer <- factorial(x-1)/(factorial(k-1)*factorial(x-k))*(theta^k)*(1-theta)^(x-k)
return(answer)
}
neg_binomial_function(7,2,.5)
poisson_dist_cum<-function(lambda,x) {
new_answer=0
if (x>=0) {
answer<-new_answer+poisson_dist(lambda,x)
x=x-1
new_answer=answer
}
else {
return answer
}
}
poisson_dist_cum<-function(lambda,x) {
new_answer=0
if (x>=0) {
answer<-new_answer+poisson_dist(lambda,x)
x=x-1
new_answer=answer
}
else {
return answer
}
}
poisson_dist_cum<-function(lambda,x) {
new_answer=0
if (x>=0) {
answer<-new_answer+poisson_dist(lambda,x)
x=x-1
new_answer=answer
}
else {
return answer
}
poisson_dist<-function(lambda,x){
answer<-(exp(1)^(-lambda)*lambda^x)/factorial(x)
return(answer)
}
multinomial_dist<-function(a,b,c,a1,b1,c1) {
answer <- factorial(a+b+c)/(factorial(a)*factorial(b)*factorial(c))*((a^a1)*(b^b1)*(c^c1))
return answer
}
return answer
multinomial_dist<-function(a,b,c,a1,b1,c1) {
answer <- factorial(a+b+c)/(factorial(a)*factorial(b)*factorial(c))*((a^a1)*(b^b1)*(c^c1))
return answer
}
multinomial_dist(.4,.5,.1,3,6,1)
multinomial_dist<-function(a,b,c,a1,b1,c1) {
answer <- factorial(a+b+c)/(factorial(a)*factorial(b)*factorial(c))*(a^a1)*(b^b1)*(c^c1)
return answer
}
multinomial_dist<-function(a,b,c,a1,b1,c1) {
answer <- factorial(a+b+c)/(factorial(a)*factorial(b)*factorial(c))*(a^a1)*(b^b1)*(c^c1)
return answer
}
binomial_function<-function(n,x,theta) {
answer <- factorial(n)/(factorial(x)*factorial(n-x))*(theta^x)*(1-theta)^(n-x)
return(answer)
}
binomial_function<-function(n,x,theta) {
answer <- factorial(n)/(factorial(x)*factorial(n-x))*(theta^x)*(1-theta)^(n-x)
return(answer)
}
neg_binomial_function(10,5,.5)+neg_binomial_function(10,4,.5)
neg_binomial_function(10,5,.75)
neg_binomial_function(8,5,.75)
neg_binomial_function(15,10,.5)
neg_binomial_function(15,10,.75)
neg_binomial_function(6,1,.3)
neg_binomial_function(15,2,.05)
neg_binomial_function(800,1,.001)
geometric_function<-function(x, theta) {
answer <- (theta)*(1-theta)^(x-1)
return(answer)
}
geometric_function(800,.001)
n_choose_r(14,2)
n_choose_r(4,0)
n_choose_r(14,2)
n_choose_r(18,2)
91/153
n_choose_r(16,2)
n_choose_r(6,2)
120/153
15/153
n_choose_r(16,2)
120/153
n_choose_r(10,2)
45/153
n_choose_r(6,3)
n_choose_r(16,3)
20/560
n_choose_r(6,2)
15/560
n_choose_r(6,1)
n_choose_r(10,2)
45*6
270/560
n_choose_r(10,3)
120/560
n_choose_r(9,2)
n_choose_r(6,3)
n_choose_r(15,5)
20*36/3003
n_choose_r(76,2)
n_choose_r(80,3)
2850/82160
4/80
2850*4/82160
binomial_function(3,1,.05)
n_choose_r(240,4)*n_choose_r(60,2)/n_choose_r(300,6)
n_choose_r(240,4)*n_choose_r(60,2)/n_choose_r(300,6)
n_choose_r(240,4)
n_choose_r(60,2)
binomial_function(6,4,40)
binomial_function(6,4,.8)
binomial_function(12,1,.1)
binomial_function(12,0,.1)
.3765727/.2824295
binomial_function<-function(x,n,theta) {
answer <- factorial(n)/(factorial(x)*factorial(n-x))*(theta^x)*(1-theta)^(n-x)
return(answer)
}
poisson_dist<-function(x,lambda){
answer<-(exp(1)^(-lambda)*lambda^x)/factorial(x)
return(answer)
}
poisson_dist(2,2.1)
poisson_dist(5,6)
poisson_dist(0,6)+poisson_dist(1,6)+poisson_dist(2,6)+poisson_dist(3,6)
poisson_dist(0,1.2)+poisson_dist(1,1.2)+poisson_dist(2,1.2)
poisson_dist(2,3.3)
poisson_dist(0,1.8)
poisson_dist(1,1.8)
poisson_dist(1,.5)
poisson_dist(1,.5)+poisson_dist(1,.5)
.0015+.0015
=.003/sqrt(12)
.003/sqrt(12)
1-2*pt(2,5,lower.tail=FALSE)
pt(2,5,lower.tail=FALSE)
2*pt(2,5,lower.tail=FALSE)
1-2*pt(2,5,lower.tail=FALSE)
X <- matrix(c(1,1,1,1,0,0,1,1),nrow=4)
rownames(X) <- c("a","a","b","b")
X
beta <- c(5,2)
X%*%beta
new <- X%*%beta
lm(new)
new[ 1:2, ]
fitted[ 1:2, ]
fitted = X%*%beta
fitted[ 1:2, ]
fitted = X%*%beta
fitted[ 1:2,]
X
beta
RNGkind("Mersenne-Twister", "Inversion", "Rejection")
y = h0 + v0 *tt  - 0.5* g*tt^2 + rnorm(n,sd=1)
betag <- 9.8 ## meters per second
h0 <- 56.67
v0 <- 0
n <- 25
tt <- seq(0,3.4,len=n) ##time in secs, t is a base function
y <- h0 + v0 *tt  - 0.5* g*tt^2 + rnorm(n,sd=1)
g <- 9.8 ## meters per second
y <- h0 + v0 *tt  - 0.5* g*tt^2 + rnorm(n,sd=1)
X = cbind(1,tt,tt^2)
A = solve(crossprod(X))%*%t(X)
X
A
A
-2 * (A %*% y) [3] correct
-2 * (A %*% y) [3]
beta <- c(5,2)
new <- X%*%beta
new[ 1:2, ]
fitted = X%*%beta
fitted[ 1:2,]
X
beta
g <- 9.8 ## meters per second
h0 <- 56.67
v0 <- 0
n <- 25
tt <- seq(0,3.4,len=n) ##time in secs, t is a base function
y <- h0 + v0 *tt  - 0.5* g*tt^2 + rnorm(n,sd=1)
X = cbind(1,tt,tt^2)
A = solve(crossprod(X))%*%t(X)
X
A
-2 * (A %*% y) [3]
(A %*% y)
library(UsingR)
x = father.son$fheight
y = father.son$sheight
n = length(y)
N = 50
set.seed(1)
index = sample(n,N)
sampledat = father.son[index,]
x = sampledat$fheight
y = sampledat$sheight
betahat = lm(y~x)$coef
fit = lm(y ~ x)
fit$fitted.values
sigma2 = SSR / 48
fit$fitted.values
fit = lm(y ~ x)
SSR <- sum((predict(x.lm) - mean(y))^2)
SSR <- sum((predict(fit) - mean(y))^2)
sigma2 = SSR / 48
(sigma2 = SSR / 48)
SSR <- sum((predict(fit$fitted.values) - mean(y))^2)
SSR <- sum((predict(betahat) - mean(y))^2)
fit = lm(y ~ x)
fit
print(summary(fit))
var(y)
X = cbind(rep(1,N), x)
solve (t(x)%*%X))
solve t(x)%*%X
solve (t(x))%*%X
solve (t(x)) %*% X
solve t(x) %*% X
X = cbind(rep(1,N), x)
solve t(X) %*% X
solve (t(X)) %*% X
X = cbind(rep(1,N), x)
X
(t(X)) %*% X
solve(X)%*%X
solve(crossprod(X))
solve(t(X)%*%X)
diag(try)
try <- solve(t(X)%*%X)
diag(try)
try%*%diag1
diag1 <- diag(try)
try%*%diag1
sqrt(product)
product <- try%*%diag1
sqrt(product)
fit = lm(y ~ x)
sigma2 = sum((y - fit$fitted.values)^2) / (N - 2)
sqrt(sigma2 * diag(solve(t(X) %*% X)))
SSR_check <- sum((y - fit$fitted.values)^2)
(SSR_check <- sum((y - fit$fitted.values)^2))
fit$fitted.values
fit = lm(y ~ x)
fit
fit$fitted.values
model.matrix(X)
library(tidyr)
library(dplyr)
library(ggplot2)
library(tidyverse)
setwd("C:/Users/19728/Desktop/EPPS 7313")
house_data <- read.csv("kc_house_data.csv")
head(house_data)
model.matrix(house_data)
model.matrix(~sqft_living, data=house_data)
X = cbind(rep(1,nx + ny),
rep(c(0,1),
c(nx, ny)))
nx=5
ny=7
X = cbind(rep(1,nx + ny),
rep(c(0,1),
c(nx, ny)))
X
t(X)%*%X
url <- "https://raw.githubusercontent.com/genomicsclass/datdata/master/inst/extdata/spider_wolff_gorb_2013.csv"
file_name <- "spier_wolff_gorb_2013.csv"
library(downloader)
install.packages(downloader)
install_github("downloader")
install.packages("rafalib")
library(rafalib)
install.packages("swirl")
library(swirl)
swirl()
vector_1 <- c(2.23, 3.45, 1.87, 2.11, 7.33, 18.34, 19.23)
mean(vector_1)
for (loop_variable in 1:25) {
new_x <- 0
x <- new_x+(x*x)
new_x <- x+new_x
print(new_x)
}
for (x in 1:25) {
new_x <- 0
x <- new_x+(x*x)
new_x <- x+new_x
print(new_x)
}
print(new_x)
for (x in 1:25) {
new_x <- 0
new_x <- new_x+(x*x)
x<- new_x+x
}
print(new_x)
for (new_variable in 1:25) {
new_x <- 0
new_x <- new_x+(x*x)
}
print(new_x)
new_x <- 0
for (new_variable in 1:25) {
new_x <- new_x+(x*x)
}
print(new_x)
print(new_x)
for (new_variable in 1:25) {
new_x <- new_x+(x*x)
print(new_x)
}
print(new_x)
for (x in 1:25) {
new_x <- new_x+(x*x)
print(new_x)
}
print(new_x)
for (x in 1:25) {
new_x <- new_x+(x*x)
print(new_x)
}
new_x <- 0
for (x in 1:25) {
new_x <- new_x+(x*x)
print(new_x)
}
print(new_x)
class(cars)
nrows(cars)
rows(cars)
summary(cars)
count(cars)
nrow(cars)
ncol(cars)
cars[2,1]
head(cars)
names(cars)[2]
cars[,2]
mean(cars[,2])
which(row=85)
which(row<-85)
which(row==85)
cars
which(cars[,2]==85)
?dim
a <- rep(1,3)
b <- c(1,5,3)
a %*% b
a <- c(1,2,3,byrow=TRUE)
b <- c(1,5,3)
a %*% b
a
a <- c(1,2,3)
a
a %*% b
b <- c(1,5,3)
b
a
outer(a,b)
example(log)
example("log")
args("log")
outer(a,b)
sqrt(1:100)
mean(sqrt(1:100))
apropos("log")
??loglinear
rsitesearch("loglinear",restrict="functions")
RSiteSearch("loglinear",restrict="functions")
